virtualenv virtname -p python3 - create new virtual environment w/ python 3
django-admin startproject projectname . - create new django project at working directory
python manage.py runserver - run the django server
python manage.py migrate - sync settings and apps with django project, syncs database (run when makeing models)
python manage.py createsuperuser - create super user
python manage.py startapp appname - create new app in project (building block)
python manage.py makemigrations
python manage.py shell

**Settings.py***
OS, base directory, secret key, debug, allowed hosts, installed apps

*INSTALLED_APPS* - core components in project
auth, user (createsuperuser)

*MIDDLEWARE* - how requests and security are handled

*ROOT_URLCOF* - how to route any given URL

*TEMPLATES* - 

*WSGI_APPLICATION* how the server works

*DATABASES* - mappings to databases, postgres, mysql, etc. Default is sqlite3 database.

*AUTH_PASSWORD_VALIDATORS* - validate passwords


*STATIC_URL* where to store static files

*** NEW APP ***
*Models.py*
create a class item: Product():

***Settings.py**
*INSTALLED_APPS*
Add new app to list of installed apps 'products',
-python manage.py makemigrations
-python manage.py migrate

***app/admin.py***
>from .models import Product  - (class created in models.py)
>admin.site.register(Product)

**** create product objects in the python shell ****
root of project
>python manage.py shell
> from products.models import Product
> Product.objects.all()  - queries entire model database for entries
> Product.objects.create(title = '', description = '', price = '', summary = '') - create new entires to Product

**** VIEWS ****
>python manage.py startapp pages
* from django.http import HttpResponse
* return HttpResponse("<h1> Hello World!<h1>")

***Settings.py***
*ROOT_URLCONF*

***project***
**urls.py**
>from pages.views import home_view
>urlPatterns = [ path('', views.home_view, name='home'), path(/admin...)]

**** URL ROUTING AND REQUESTS ****
*urlpatterns = *
*urls.py*

**** TEMPLATES ****
Create new folder Templates in src directory
create new file home.html
***settings.py***
'DIRS': [] - where to save template file path
[os.path.join(BASE_DIR, "templates")] - file path

****TEMPLATE ENGINE****
{{% block foo %}} 
anything in between here on inherited html is replaced
by corresponding block on child page.
{{% endblock foo %}} 

{% include 'navbar.html' %}

**** TEMPLATE CONTEXT ****
views.py > return render(request, "home.html", {}) - the dictionary is the context. Context can be any data type.

***** FOR LOOP IN TEMPLATE ****
{% for item in my_list %}
{% endfor %}
{% if foo == 1 %}
<li> {{item|add:50}} </li>
{% else %}
<li> {{ forloop.counter }}: {{ item }}
{% endif %}

*Template tags {{ |center|capfirst|upper|add:|subtract:|safe|slufigy }} *slugify makes html safe*

***** RENDER DATA FROM THE DATABASE WITH A MODEL *****
>python manage.py shell
>from products.models import Product
>obj = Product.objects.get(id=1)
>dir(obj) > obj.title > obj.price > obj.featured

templates/product/detail.htlm
****products/views.py****
def product_detail_view()

obj = Product.objects.get(id=1) #id is automatically created by Django
context = {'object' : obj}

*****DJANGO TEMPLATES LOAD WITH APPS *****
app/templates/app
product/templates/products (make last two dir here)
Django looks for templates in several plates.

lib > python3.6 > django > contrib > admin > templates (admin app has templates, has it own app structure for study)
To override a template, place it in the filesystem templates location specified earlier in tutorial, use same file structure

***** FORMS *****
new file, products/forms.py

{% extends 'base.html' %}
{% block content %}
	<h1> Product Create Form</h1>
	<form method='POST'>{% csrf_token %}
	{{ form.as_p }} 
	<input type ='submit' value='Save'/>
		
	</form>

{% endblock %}


**** pure HTML form ****
{% extends 'base.html' %}
{% block content %}
	<h1> Product Create Form</h1>
<form  action='.' method='POST'> {% csrf_token %}
	<input type ='text' name='title' placeholder="Your title"/>
	<input type="submit" name="Save">		
</form>

{% endblock %}
*** products/views.py ***
def product_create_view(request):
	my_form = RawProductForm()
	if request.method == "POST":
		my_form = RawProductForm(request.POST) # this part validates form data
		if my_form.is_valid():
			print(my_form.cleaned_data)
			Product.objects.create(**my_form.cleaned_data)
		else:
			print(my_form.errors)
	context = {
		"form": my_form
	}
	return render(request, "products/product_create.html", context)

***products/forms.py
class RawProductForm(forms.Form):
	title 		= forms.CharField(required=True, label='Title', 
		widget=forms.TextInput(attrs={"placeholder": "placeholder"}))
	description = forms.CharField(
		required=False, 
		widget=forms.Textarea(
			attrs={
				"placeholder": "Your description",
				"class": "new class name two",
				"id": "my-id-for-text-area",
				"rows": 10,
				"cols": 80,

			}
		)
	)
	price 		= forms.DecimalField(required=True, initial=0.00)

***** FORM VALIDATION METHODS *****